{"version":3,"sources":["components/User/User.tsx","components/Todo/Todo.tsx","constants.ts","components/TodoList/TodoList.tsx","api.tsx","components/Todos/Todos.tsx","store.ts","App.tsx","index.tsx"],"names":["User","user","className","name","Todo","connect","state","todos","dispatch","removeTodo","id","type","value","todo","title","completed","onClick","TodoList","map","key","API_URL","getData","url","a","fetch","response","json","Todos","setTodos","useState","isLoading","setLoading","showTodos","Promise","all","todosFromServer","users","preparedTodos","find","person","userId","filter","typeOfFilter","sort","b","localeCompare","toString","length","disabled","initialState","store","createStore","action","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37518069.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { UserType } from '../../interfaces';\nimport './User.css';\n\ninterface Props {\n  user: UserType;\n}\n\nexport const User: FC<Props> = ({ user }) => (\n  <p className=\"user\">{user.name}</p>\n);\n","import React, { FC } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { User } from '../User/User';\nimport { TodoWithUsers, State } from '../../interfaces';\nimport { REMOVE_TODO } from '../../constants';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUsers;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoTemplate: FC<Props> = ({ todo, removeTodo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <>\n      <p className=\"todo__title\">{title}</p>\n      <User user={user} />\n      <p className=\"todo__status\">{completed ? 'OK' : '-'}</p>\n      <button\n        className=\"remove-button\"\n        type=\"button\"\n        onClick={() => removeTodo(id)}\n      >\n        Remove\n      </button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  removeTodo: (id: number) => dispatch({\n    type: REMOVE_TODO,\n    value: id,\n  }),\n});\n\nexport const Todo = connect(mapStateToProps, mapDispatchToProps)(TodoTemplate);\n","export const SET_TODOS = 'SET_TODOS';\nexport const REMOVE_TODO = 'REMOVE_TODO';\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\nimport { TodoWithUsers } from '../../interfaces';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodoWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"list\">\n      {todos.map(todo => (\n        <li key={todo.id} className=\"list__item todo\">\n          <Todo todo={todo} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { TodoType, UserType } from './interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getUsers = (): Promise<UserType[]> => {\n  return getData(`${API_URL}users`);\n};\n\nexport const getTodos = (): Promise<TodoType[]> => {\n  return getData(`${API_URL}todos`);\n};\n","import React, { FC, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { TodoList } from '../TodoList/TodoList';\nimport { UserType, TodoWithUsers, State } from '../../interfaces';\nimport { getUsers, getTodos } from '../../api';\nimport { SET_TODOS } from '../../constants';\n\ninterface Actions {\n  setTodos: (todos: TodoWithUsers[]) => void;\n}\n\ntype Props = State & Actions;\n\nconst TodosTemplate: FC<Props> = ({ todos, setTodos }) => {\n  const [isLoading, setLoading] = useState(false);\n\n\n  const showTodos = async () => {\n    setLoading(true);\n\n    const [todosFromServer, users] = await Promise.all(\n      [getTodos(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo) => {\n      const user = users.find((person) => person.id === todo.userId) as UserType;\n\n      return {\n        ...todo,\n        user,\n      };\n    });\n\n    setTodos(preparedTodos);\n    setLoading(false);\n  };\n\n  const filter = (typeOfFilter: string) => {\n    switch (typeOfFilter) {\n      case 'sortByTitle':\n        setTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'sortByName':\n        setTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'sortByCompleted':\n        setTodos([...todos]\n          .sort((a, b) => b.completed.toString()\n            .localeCompare(a.completed.toString())));\n        break;\n      default:\n    }\n  };\n\n  if (!todos.length) {\n    return (\n      <button\n        className=\"start-button\"\n        type=\"button\"\n        onClick={showTodos}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Loading...' : 'Start Load'}\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Static list of todos</h1>\n      <div className=\"buttons\">\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByTitle')}\n        >\n        Sort by title\n        </button>\n        <button\n          className=\" button\"\n          type=\"button\"\n          onClick={() => filter('sortByName')}\n        >\n          Sort by name\n        </button>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => filter('sortByCompleted')}\n        >\n          Sort by completed\n        </button>\n      </div>\n      <p className=\"amount\">{`Amount of todos: ${todos.length}`}</p>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  setTodos: (todos: TodoWithUsers[]) => dispatch({\n    type: SET_TODOS,\n    value: todos,\n  }),\n});\n\nexport const Todos = connect(mapStateToProps, mapDispatchToProps)(TodosTemplate);\n","\nimport { createStore, AnyAction } from 'redux';\nimport { State } from './interfaces';\nimport { SET_TODOS, REMOVE_TODO } from './constants';\n\nconst initialState: State = {\n  todos: [],\n};\n\nfunction reducer(state: State = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n      };\n\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(item => item.id !== action.value),\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer, initialState);\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { Todos } from './components/Todos/Todos';\nimport { store } from './store';\n\nconst App: FC = () => (\n  <Provider store={store}>\n    <Todos />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}