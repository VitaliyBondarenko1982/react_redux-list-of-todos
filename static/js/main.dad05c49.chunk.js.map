{"version":3,"sources":["components/User/User.tsx","components/Todo/Todo.tsx","store/actionCreators.ts","store/actionTypes.ts","components/TodoList/TodoList.tsx","utils/api.tsx","components/Todos/Todos.tsx","utils/dataMappers.ts","store/store.ts","App.tsx","index.tsx"],"names":["User","user","className","name","mapDispatchToProps","removeTodo","id","type","payload","Todo","connect","state","todos","todo","title","completed","onClick","TodoList","map","key","API_URL","getData","url","a","fetch","response","json","setTodos","setUsers","users","startLoading","stopLoading","setIsLoaded","setError","setNoError","setSortField","field","Todos","length","find","person","userId","isLoaded","isLoading","error","sortField","loadData","useCallback","Promise","all","then","loadedTodos","loadedUsers","catch","finally","sortHandler","sortedTodos","useMemo","sort","b","localeCompare","toString","sortTodos","disabled","initialState","store","createStore","action","filter","item","composeWithDevTools","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dad05c49.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { UserType } from '../../utils/interfaces';\nimport './User.css';\n\ninterface Props {\n  user: UserType;\n}\n\nexport const User: FC<Props> = ({ user }) => (\n  <p className=\"user\">{user.name}</p>\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { User } from '../User/User';\nimport { TodoWithUsers, RootState } from '../../utils/interfaces';\nimport { removeTodo as deleteTodo } from '../../store/actionCreators';\nimport './Todo.css';\n\ninterface Props {\n  todo: TodoWithUsers;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoTemplate: FC<Props> = ({ todo, removeTodo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <>\n      <p className=\"todo__title\">{title}</p>\n      <User user={user} />\n      <p className=\"todo__status\">{completed ? 'OK' : '-'}</p>\n      <button\n        className=\"remove-button\"\n        type=\"button\"\n        onClick={() => removeTodo(id)}\n      >\n        Remove\n      </button>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = {\n  removeTodo: deleteTodo,\n};\n\nexport const Todo = connect(mapStateToProps, mapDispatchToProps)(TodoTemplate);\n","import { TodoType, UserType } from '../utils/interfaces';\nimport {\n  SET_TODOS,\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_ERROR,\n  REMOVE_TODO,\n  SET_USERS,\n  SET_SORT_FIELD,\n} from './actionTypes';\n\nexport const setTodos = (todos: TodoType[]) => ({\n  type: SET_TODOS,\n  payload: todos,\n});\n\nexport const setUsers = (users: UserType[]) => ({\n  type: SET_USERS,\n  payload: users,\n});\n\nexport const startLoading = () => ({\n  type: SET_IS_LOADING,\n  payload: true,\n});\n\nexport const stopLoading = () => ({\n  type: SET_IS_LOADING,\n  payload: false,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  payload: true,\n});\n\nexport const setError = () => ({\n  type: SET_ERROR,\n  payload: true,\n});\n\nexport const setNoError = () => ({\n  type: SET_ERROR,\n  payload: false,\n});\n\nexport const removeTodo = (id: number) => ({\n  type: REMOVE_TODO,\n  payload: id,\n});\n\nexport const setSortField = (field: string) => ({\n  type: SET_SORT_FIELD,\n  payload: field,\n});\n","export const SET_TODOS = 'SET_TODOS';\nexport const SET_USERS = 'SET_USERS';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SORT_FIELD = 'SORT_FIELD';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_SORT_FIELD = 'SET_SORT_FIELD';\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\nimport { TodoWithUsers } from '../../utils/interfaces';\nimport './TodoList.css';\n\ninterface Props {\n  todos: TodoWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <ul className=\"list\">\n      {todos.map(todo => (\n        <li key={todo.id} className=\"list__item todo\">\n          <Todo todo={todo} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { TodoType, UserType } from './interfaces';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getUsers = (): Promise<UserType[]> => {\n  return getData(`${API_URL}users`);\n};\n\nexport const getTodos = (): Promise<TodoType[]> => {\n  return getData(`${API_URL}todos`);\n};\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { TodoList } from '../TodoList/TodoList';\nimport {\n  TodoWithUsers,\n  RootState,\n  UserType,\n  TodoType,\n} from '../../utils/interfaces';\nimport { todosWithUsers, sortTodos } from '../../utils/dataMappers';\nimport { getTodos, getUsers } from '../../utils/api';\nimport {\n  startLoading as onStartLoading,\n  stopLoading as onStopLoading,\n  setError as onSetError,\n  setNoError as onSetNoError,\n  setIsLoaded as onSetLoaded,\n  setTodos as onSetTodos,\n  setUsers as onSetUsers,\n  setSortField as onSetSortField,\n} from '../../store/actionCreators';\n\ninterface Props extends Pick<RootState,\n'isLoaded' | 'isLoading' | 'error' | 'sortField'> {\n  todos: TodoWithUsers[];\n  setTodos: (todos: TodoType[]) => void;\n  setUsers: (users: UserType[]) => void;\n  startLoading: () => void;\n  stopLoading: () => void;\n  setIsLoaded: () => void;\n  setError: () => void;\n  setNoError: () => void;\n  setSortField: (field: string) => void;\n}\n\n\nconst TodosTemplate: FC<Props> = ({\n  isLoaded,\n  isLoading,\n  error,\n  todos,\n  sortField,\n  setTodos,\n  setUsers,\n  startLoading,\n  stopLoading,\n  setIsLoaded,\n  setError,\n  setNoError,\n  setSortField,\n}) => {\n  const loadData = useCallback(() => {\n    startLoading();\n\n    Promise.all([getTodos(), getUsers()])\n      .then(([loadedTodos, loadedUsers]) => {\n        setUsers(loadedUsers);\n        setTodos(loadedTodos);\n        setIsLoaded();\n        setNoError();\n      })\n      .catch(() => setError())\n      .finally(() => stopLoading());\n  }, [setError, setNoError, setIsLoaded, setTodos, setUsers, startLoading, stopLoading]);\n\n  const sortHandler = (field: string) => {\n    setSortField(field);\n  };\n\n  const sortedTodos = useMemo(() => sortTodos(sortField, todos), [sortField, todos]);\n\n  if (error) {\n    return (\n      <p>\n        `Error loading! Try again!`\n      </p>\n    );\n  }\n\n  return (\n    <>\n      {!isLoaded\n        ? (\n          <button\n            className=\"start-button\"\n            type=\"button\"\n            onClick={loadData}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Start Load'}\n          </button>\n        ) : (\n          <div className=\"App\">\n            <h1 className=\"title\">Static list of todos</h1>\n            <div className=\"buttons\">\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => sortHandler('sortByTitle')}\n              >\n                Sort by title\n              </button>\n              <button\n                className=\" button\"\n                type=\"button\"\n                onClick={() => sortHandler('sortByName')}\n              >\n                Sort by name\n              </button>\n              <button\n                className=\"button\"\n                type=\"button\"\n                onClick={() => sortHandler('sortByCompleted')}\n              >\n                Sort by completed\n              </button>\n            </div>\n            <p className=\"amount\">{`Amount of todos: ${todos.length}`}</p>\n            <TodoList todos={sortedTodos} />\n          </div>\n        )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    todos: state.users.length\n      ? todosWithUsers(state.todos, state.users) : [],\n    isLoaded: state.isLoaded,\n    isLoading: state.isLoading,\n    error: state.error,\n    sortField: state.sortField,\n  };\n};\n\nconst mapDispatchToProps = {\n  setTodos: onSetTodos,\n  setUsers: onSetUsers,\n  startLoading: onStartLoading,\n  stopLoading: onStopLoading,\n  setIsLoaded: onSetLoaded,\n  setError: onSetError,\n  setNoError: onSetNoError,\n  setSortField: onSetSortField,\n};\n\nexport const Todos = connect(mapStateToProps, mapDispatchToProps)(TodosTemplate);\n","import { TodoType, UserType, TodoWithUsers } from './interfaces';\n\nexport const todosWithUsers = (todos: TodoType[], users: UserType[]) => {\n  return todos.map((todo) => {\n    const user = users.find((person) => person.id === todo.userId) as UserType;\n\n    return {\n      ...todo,\n      user,\n    };\n  });\n};\n\nexport const sortTodos = (field: string, todos: TodoWithUsers[]) => {\n  switch (field) {\n    case 'sortByTitle':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n    case 'sortByName':\n      return [...todos]\n        .sort((a, b) => a.user.name.localeCompare(b.user.name));\n    case 'sortByCompleted':\n      return [...todos].sort((a, b) => b.completed.toString()\n        .localeCompare(a.completed.toString()));\n    default:\n      return todos;\n  }\n};\n","import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { RootState } from '../utils/interfaces';\nimport {\n  SET_TODOS,\n  REMOVE_TODO,\n  SET_IS_LOADED,\n  SET_IS_LOADING,\n  SET_USERS,\n  SET_SORT_FIELD,\n} from './actionTypes';\n\n\nconst initialState: RootState = {\n  isLoaded: false,\n  isLoading: false,\n  todos: [],\n  users: [],\n  error: false,\n  sortField: '',\n};\n\nfunction reducer(state: RootState = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case SET_USERS: {\n      return {\n        ...state,\n        users: action.payload,\n      };\n    }\n\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.payload,\n      };\n\n    case REMOVE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(item => item.id !== action.payload),\n      };\n\n    case SET_SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk)));\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { Todos } from './components/Todos/Todos';\nimport { store } from './store/store';\n\nconst App: FC = () => (\n  <Provider store={store}>\n    <Todos />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}